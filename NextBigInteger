ref: https://programmers.co.kr/learn/courses/30/lessons/12911

< 문제 정리 >

n의 다음 큰 숫자는?

조건 1. 자연수 n 보다 큰 자연수
조건 2. 다음 큰 숫자와 n은 2진수로 변환하면 1의 개수가 같음
조건 3. 조건 1, 2를 만족하는 수 중 가장 작은 수 

78 : 1 0 0 1 1 1 0
83 : 1 0 1 0 0 1 1

78 = 64 + 0 + 0 + 8 + 4 + 2 + 0

78보다 작은 수 중 2의 제곱배수(?) 중 가장 큰 수 찾기
x = 78 - 가장 큰 수
x보다 작은 수 중 2의 제곱배수(?) 중 가장 큰 수 찾기
반복

78보다 큰 수 중 위에 과정을 반복하고 1이 4개보다 작거나 많으면 바로 pass
더 빠른 경우는?

< source code >

class Solution {
    int getCount(int num){
        int count=0;
        while(num>0){
            if(num%2==1){
                count++;
            }
                num/=2;
            
        }
        return count;
    }
    
  public int solution(int n) {
      int answer = 0;
      int nCount = getCount(n);
      System.out.println(nCount);
      while(true){
          n++;
          if(getCount(n) == nCount)
              return n;
      }
  }
}


< comment >
이진수의 1을 왔다갔다 하며 효율적인 방법을 찾아 성능을 높여야 하는 문제라고 판단해 기본 알고리즘에 대한 생각을 놓침
이진수만 구하면 바로 해결되는 문제인데 이진수 구하는 과정을 비효율적으로 짜서 효율테스트에서 막힘
문제를 많이 풀면 문제가 원하는 바가 단순 알고리즘인지 성능 향상인지 알 수 있을것인가
